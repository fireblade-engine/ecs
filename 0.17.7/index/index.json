{
  "includedArchiveIdentifiers" : [
    "com.github.fireblade-engine.FirebladeECS"
  ],
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Essentials",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/firebladeecs\/gettingstartedwithfirebladeecs",
            "title" : "Getting started with Fireblade ECS",
            "type" : "article"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/next()",
                    "title" : "func next() -> Entity?",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/elements",
                        "title" : "var elements: Self",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/lazy",
                        "title" : "var lazy: Self.Elements",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/compactmap(_:)-8gnoo",
                        "title" : "func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/drop(while:)",
                        "title" : "func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/filter(_:)",
                        "title" : "func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/flatmap(_:)-76pip",
                        "title" : "func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/flatmap(_:)-nan4",
                        "title" : "func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/map(_:)-287i5",
                        "title" : "func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/lazysequenceprotocol-implementations",
                    "title" : "LazySequenceProtocol Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/compactmap(_:)-9dnmz",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/droplast(_:)",
                        "title" : "func dropLast(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/flatmap(_:)-51oip",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/flatmap(_:)-7o22r",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/makeiterator()",
                        "title" : "func makeIterator() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/map(_:)-95b06",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/prefix(_:)",
                        "title" : "func prefix(Int) -> PrefixSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/sorted(using:)-4z08n",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/sorted(using:)-508ku",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/suffix(_:)",
                        "title" : "func suffix(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/nexus\/entitiesiterator",
                "title" : "Nexus.EntitiesIterator",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/init()",
                "title" : "convenience init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/codingstrategy",
                "title" : "var codingStrategy: any CodingStrategy",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/delegate",
                "title" : "var delegate: (any NexusEventDelegate)?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/entityidgenerator",
                "title" : "var entityIdGenerator: any EntityIdentifierGenerator",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/numcomponents",
                "title" : "var numComponents: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/numentities",
                "title" : "var numEntities: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/numfamilies",
                "title" : "var numFamilies: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/assign(component:to:)-4hzds",
                "title" : "func assign(component: some Component, to: Entity) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/assign(component:to:)-747oe",
                "title" : "func assign(component: any Component, to: Entity) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/assign(components:to:)",
                "title" : "func assign(components: some Collection<any Component>, to: Entity) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/canbecomemember(_:in:)",
                "title" : "func canBecomeMember(Entity, in: FamilyTraitSet) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/clear()",
                "title" : "func clear()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/count(components:)",
                "title" : "func count(components: EntityIdentifier) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/createentities(count:using:)-3y8oa",
                "title" : "func createEntities(count: Int, using: (ComponentsBuilder.Context) -> any Component) -> [Entity]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/createentities(count:using:)-9hu85",
                "title" : "func createEntities(count: Int, using: (ComponentsBuilder.Context) -> [any Component]) -> [Entity]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/createentity()",
                "title" : "func createEntity() -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/createentity(using:)-6lf7n",
                "title" : "func createEntity(using: () -> any Component) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/createentity(using:)-8d3i7",
                "title" : "func createEntity(using: () -> [any Component]) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/createentity(with:)-3sc6g",
                "title" : "func createEntity(with: any Component...) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/createentity(with:)-6157r",
                "title" : "func createEntity(with: some Collection<any Component>) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/destroy(entity:)",
                "title" : "func destroy(entity: Entity) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/destroy(entityid:)",
                "title" : "func destroy(entityId: EntityIdentifier) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/entity(from:)",
                "title" : "func entity(from: EntityIdentifier) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/exists(entity:)",
                "title" : "func exists(entity: EntityIdentifier) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/family(requires:excludesall:)",
                "title" : "func family<Comp1>(requires: Comp1.Type, excludesAll: any Component.Type...) -> Family1<Comp1>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/family(requiresall:_:_:_:_:_:_:_:excludesall:)",
                "title" : "func family<Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7, Comp8>(requiresAll: Comp1.Type, Comp2.Type, Comp3.Type, Comp4.Type, Comp5.Type, Comp6.Type, Comp7.Type, Comp8.Type, excludesAll: any Component.Type...) -> Family8<Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7, Comp8>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/family(requiresall:_:_:_:_:_:_:excludesall:)",
                "title" : "func family<Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7>(requiresAll: Comp1.Type, Comp2.Type, Comp3.Type, Comp4.Type, Comp5.Type, Comp6.Type, Comp7.Type, excludesAll: any Component.Type...) -> Family7<Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/family(requiresall:_:_:_:_:_:excludesall:)",
                "title" : "func family<Comp1, Comp2, Comp3, Comp4, Comp5, Comp6>(requiresAll: Comp1.Type, Comp2.Type, Comp3.Type, Comp4.Type, Comp5.Type, Comp6.Type, excludesAll: any Component.Type...) -> Family6<Comp1, Comp2, Comp3, Comp4, Comp5, Comp6>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/family(requiresall:_:_:_:_:excludesall:)",
                "title" : "func family<Comp1, Comp2, Comp3, Comp4, Comp5>(requiresAll: Comp1.Type, Comp2.Type, Comp3.Type, Comp4.Type, Comp5.Type, excludesAll: any Component.Type...) -> Family5<Comp1, Comp2, Comp3, Comp4, Comp5>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/family(requiresall:_:_:_:excludesall:)",
                "title" : "func family<Comp1, Comp2, Comp3, Comp4>(requiresAll: Comp1.Type, Comp2.Type, Comp3.Type, Comp4.Type, excludesAll: any Component.Type...) -> Family4<Comp1, Comp2, Comp3, Comp4>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/family(requiresall:_:_:excludesall:)",
                "title" : "func family<Comp1, Comp2, Comp3>(requiresAll: Comp1.Type, Comp2.Type, Comp3.Type, excludesAll: any Component.Type...) -> Family3<Comp1, Comp2, Comp3>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/family(requiresall:_:excludesall:)",
                "title" : "func family<Comp1, Comp2>(requiresAll: Comp1.Type, Comp2.Type, excludesAll: any Component.Type...) -> Family2<Comp1, Comp2>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/get(components:)",
                "title" : "func get(components: EntityIdentifier) -> Set<ComponentIdentifier>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/get(safe:)",
                "title" : "func get<C>(safe: EntityIdentifier) -> C?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/get(safe:for:)-65xry",
                "title" : "func get(safe: ComponentIdentifier, for: EntityIdentifier) -> (any Component)?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/get(safe:for:)-fncz",
                "title" : "func get<C>(safe: ComponentIdentifier, for: EntityIdentifier) -> C?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/get(unsafe:)",
                "title" : "func get<C>(unsafe: EntityIdentifier) -> C",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/get(unsafe:for:)",
                "title" : "func get(unsafe: ComponentIdentifier, for: EntityIdentifier) -> any Component",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/has(componentid:entityid:)",
                "title" : "func has(componentId: ComponentIdentifier, entityId: EntityIdentifier) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/ismember(_:in:)-9pjqj",
                "title" : "func isMember(EntityIdentifier, in: FamilyTraitSet) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/ismember(_:in:)-qjsg",
                "title" : "func isMember(Entity, in: FamilyTraitSet) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/ismember(entity:infamilywithtraits:)",
                "title" : "func isMember(entity: EntityIdentifier, inFamilyWithTraits: FamilyTraitSet) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/makeentitiesiterator()",
                "title" : "func makeEntitiesIterator() -> Nexus.EntitiesIterator",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/members(withfamilytraits:)",
                "title" : "func members(withFamilyTraits: FamilyTraitSet) -> UnorderedSparseSet<EntityIdentifier, EntityIdentifier.Identifier>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/remove(component:from:)",
                "title" : "func remove(component: ComponentIdentifier, from: EntityIdentifier) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/removeall(components:)",
                "title" : "func removeAll(components: EntityIdentifier) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexus\/single(_:)",
                "title" : "func single<S>(S.Type) -> Single<S>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/nexus\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/nexus\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/nexus",
            "title" : "Nexus",
            "type" : "class"
          },
          {
            "path" : "\/documentation\/firebladeecs\/nexusevent",
            "title" : "NexusEvent",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexuseventdelegate\/nexusevent(_:)",
                "title" : "func nexusEvent(any NexusEvent)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/nexuseventdelegate\/nexusnonfatalerror(_:)",
                "title" : "func nexusNonFatalError(String)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/nexuseventdelegate",
            "title" : "NexusEventDelegate",
            "type" : "protocol"
          },
          {
            "title" : "Entities",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/next()",
                    "title" : "func next() -> (any Component)?",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/elements",
                        "title" : "var elements: Self",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/lazy",
                        "title" : "var lazy: Self.Elements",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/compactmap(_:)-28a4v",
                        "title" : "func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/drop(while:)",
                        "title" : "func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/filter(_:)",
                        "title" : "func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/flatmap(_:)-5gjst",
                        "title" : "func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/flatmap(_:)-rss4",
                        "title" : "func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/map(_:)-1y550",
                        "title" : "func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/lazysequenceprotocol-implementations",
                    "title" : "LazySequenceProtocol Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/compactmap(_:)-me6y",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/droplast(_:)",
                        "title" : "func dropLast(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/flatmap(_:)-3do59",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/flatmap(_:)-4hclc",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/makeiterator()",
                        "title" : "func makeIterator() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/map(_:)-lhh7",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/prefix(_:)",
                        "title" : "func prefix(Int) -> PrefixSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/sorted(using:)-5uy4d",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/sorted(using:)-7n7iq",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/suffix(_:)",
                        "title" : "func suffix(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/entity\/componentsiterator",
                "title" : "Entity.ComponentsIterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/hascomponents",
                "title" : "var hasComponents: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/identifier",
                "title" : "var identifier: EntityIdentifier",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/numcomponents",
                "title" : "var numComponents: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/assign(_:)-1am53",
                "title" : "func assign(any Component) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/assign(_:)-1vxw2",
                "title" : "func assign(any Component...) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/assign(_:)-29zrg",
                "title" : "func assign(some Collection<any Component>) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/assign(_:)-3k1fy",
                "title" : "func assign(some Component) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/createentity()",
                "title" : "func createEntity() -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/createentity(with:)-2rixj",
                "title" : "func createEntity(with: any Component...) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/createentity(with:)-73l8z",
                "title" : "func createEntity(with: some Collection<any Component>) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/destroy()",
                "title" : "func destroy()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/get()",
                "title" : "func get<C>() -> C?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/get(component:)",
                "title" : "func get<A>(component: A.Type) -> A?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/get(components:_:)",
                "title" : "func get<A, B>(components: A.Type, B.Type) -> (A?, B?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/get(components:_:_:)",
                "title" : "func get<A, B, C>(components: A.Type, B.Type, C.Type) -> (A?, B?, C?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/get(valueat:)-74fok",
                "title" : "func get<Comp, Value>(valueAt: KeyPath<Comp, Value>) -> Value",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/get(valueat:)-7mw26",
                "title" : "func get<Comp, Value>(valueAt: KeyPath<Comp, Value?>) -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/has(_:)-30nlf",
                "title" : "func has(ComponentIdentifier) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/has(_:)-6f1yg",
                "title" : "func has((some Component).Type) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/makecomponentsiterator()",
                "title" : "func makeComponentsIterator() -> Entity.ComponentsIterator",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/remove(_:)-20lm5",
                "title" : "func remove(some Component) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/remove(_:)-2ire",
                "title" : "func remove((some Component).Type) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/remove(_:)-9vkyb",
                "title" : "func remove(ComponentIdentifier) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/removeall()",
                "title" : "func removeAll()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/set(value:for:)-3sn6i",
                "title" : "func set<Comp, Value>(value: Value?, for: ReferenceWritableKeyPath<Comp, Value?>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/set(value:for:)-3z0cf",
                "title" : "func set<Comp, Value>(value: Value, for: ReferenceWritableKeyPath<Comp, Value>) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/subscript(_:)-19sfh",
                "title" : "subscript<Comp, Value>(ReferenceWritableKeyPath<Comp, Value?>) -> Value?",
                "type" : "subscript"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/subscript(_:)-49uvd",
                "title" : "subscript<Comp>(Comp.Type) -> Comp?",
                "type" : "subscript"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/subscript(_:)-6fifg",
                "title" : "subscript<Comp, Value>(KeyPath<Comp, Value>) -> Value",
                "type" : "subscript"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/subscript(_:)-6vqxp",
                "title" : "subscript<Comp, Value>(KeyPath<Comp, Value?>) -> Value?",
                "type" : "subscript"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entity\/subscript(_:)-9ld1s",
                "title" : "subscript<Comp, Value>(ReferenceWritableKeyPath<Comp, Value>) -> Value",
                "type" : "subscript"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/entity\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/entity\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/entity\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/entity\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/entity\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/entity\/==(_:_:)",
                    "title" : "static func == (Entity, Entity) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/entity\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/entity",
            "title" : "Entity",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystate\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystate\/addinstance(_:)",
                "title" : "func addInstance<C>(C) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystate\/addmapping(for:)",
                "title" : "func addMapping(for: any ComponentInitializable.Type) -> StateComponentMapping",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystate\/addmethod(closure:)",
                "title" : "func addMethod<C>(closure: DynamicComponentProvider<C>.Closure) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystate\/addprovider(type:provider:)",
                "title" : "func addProvider(type: (some Component & DefaultInitializable).Type, provider: any ComponentProvider) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystate\/addsingleton(_:)",
                "title" : "func addSingleton(any ComponentInitializable.Type) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystate\/addtype(_:)",
                "title" : "func addType(any ComponentInitializable.Type) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystate\/hasprovider(for:)",
                "title" : "func hasProvider(for: any ComponentInitializable.Type) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystate\/provider(for:)",
                "title" : "func provider(for: any ComponentInitializable.Type) -> (any ComponentProvider)?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/entitystate",
            "title" : "EntityState",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystatemachine\/init(entity:)",
                "title" : "init(entity: Entity)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystatemachine\/entity",
                "title" : "var entity: Entity",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystatemachine\/addstate(name:state:)",
                "title" : "func addState(name: StateIdentifier, state: EntityState) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystatemachine\/changestate(name:)",
                "title" : "func changeState(name: StateIdentifier)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitystatemachine\/createstate(name:)",
                "title" : "func createState(name: StateIdentifier) -> EntityState",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/entitystatemachine",
            "title" : "EntityStateMachine",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitycreated\/entityid",
                "title" : "let entityId: EntityIdentifier",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/entitycreated",
            "title" : "EntityCreated",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entitydestroyed\/entityid",
                "title" : "let entityId: EntityIdentifier",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/entitydestroyed",
            "title" : "EntityDestroyed",
            "type" : "struct"
          },
          {
            "path" : "\/documentation\/firebladeecs\/entitycomponenthash",
            "title" : "EntityComponentHash",
            "type" : "typealias"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entityidentifier\/init(_:)",
                "title" : "init(EntityIdentifier.Identifier)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entityidentifier\/id",
                "title" : "let id: EntityIdentifier.Identifier",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entityidentifier\/index",
                "title" : "var index: Int",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entityidentifier\/identifier",
                "title" : "EntityIdentifier.Identifier",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entityidentifier\/invalid",
                "title" : "static let invalid: EntityIdentifier",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/entityidentifier\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/entityidentifier\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/entityidentifier\/init(integerliteral:)",
                    "title" : "init(integerLiteral: EntityIdentifier.Identifier)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/entityidentifier\/expressiblebyintegerliteral-implementations",
                "title" : "ExpressibleByIntegerLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/entityidentifier\/init(rawvalue:)",
                    "title" : "init(rawValue: EntityIdentifier.Identifier)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/entityidentifier\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/entityidentifier\/rawvalue",
                    "title" : "var rawValue: EntityIdentifier.Identifier",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/entityidentifier\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/entityidentifier\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/entityidentifier",
            "title" : "EntityIdentifier",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entityidentifiergenerator\/init(startproviding:)",
                "title" : "init<EntityIds>(startProviding: EntityIds)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entityidentifiergenerator\/markunused(entityid:)",
                "title" : "func markUnused(entityId: EntityIdentifier)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/entityidentifiergenerator\/nextid()",
                "title" : "func nextId() -> EntityIdentifier",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/entityidentifiergenerator",
            "title" : "EntityIdentifierGenerator",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/firebladeecs\/defaultentityidgenerator",
            "title" : "DefaultEntityIdGenerator",
            "type" : "typealias"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/linearincrementingentityidgenerator\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/firebladeecs\/linearincrementingentityidgenerator\/init(startproviding:)",
                "title" : "init<EntityIds>(startProviding: EntityIds)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/linearincrementingentityidgenerator\/markunused(entityid:)",
                "title" : "func markUnused(entityId: EntityIdentifier)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/linearincrementingentityidgenerator\/nextid()",
                "title" : "func nextId() -> EntityIdentifier",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/linearincrementingentityidgenerator",
            "title" : "LinearIncrementingEntityIdGenerator",
            "type" : "struct"
          },
          {
            "title" : "Components",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/firebladeecs\/component\/identifier-37iqn",
                        "title" : "var identifier: ComponentIdentifier",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/component\/identifier-4nkjm",
                        "title" : "static var identifier: ComponentIdentifier",
                        "type" : "property"
                      }
                    ],
                    "title" : "Component Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/component\/identifier-606sv",
                "title" : "var identifier: ComponentIdentifier",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/firebladeecs\/component\/identifier-4nkjm",
                        "title" : "static var identifier: ComponentIdentifier",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/component\/identifier-37iqn",
                        "title" : "var identifier: ComponentIdentifier",
                        "type" : "property"
                      }
                    ],
                    "title" : "Component Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/component\/identifier-2v86e",
                "title" : "static var identifier: ComponentIdentifier",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/component",
            "title" : "Component",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentadded\/component",
                "title" : "let component: ComponentIdentifier",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentadded\/toentity",
                "title" : "let toEntity: EntityIdentifier",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/componentadded",
            "title" : "ComponentAdded",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentremoved\/component",
                "title" : "let component: ComponentIdentifier",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentremoved\/from",
                "title" : "let from: EntityIdentifier",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/componentremoved",
            "title" : "ComponentRemoved",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentprovider\/identifier",
                "title" : "var identifier: AnyHashable",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentprovider\/getcomponent()",
                "title" : "func getComponent() -> any Component",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/componentprovider",
            "title" : "ComponentProvider",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/componentsbuilder\/context\/index",
                    "title" : "let index: Int",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/componentsbuilder\/context",
                "title" : "ComponentsBuilder.Context",
                "type" : "struct"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentsbuilder\/buildblock(_:)",
                "title" : "static func buildBlock(any Component...) -> [any Component]",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/componentsbuilder",
            "title" : "ComponentsBuilder",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/componentsbuilder\/context\/index",
                    "title" : "let index: Int",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/componentsbuilder\/context",
                "title" : "ComponentsBuilder.Context",
                "type" : "struct"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentsbuilder\/buildblock(_:)",
                "title" : "static func buildBlock(any Component...) -> [any Component]",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/componentsbuilder",
            "title" : "ComponentsBuilder",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentinstanceprovider\/init(instance:)",
                "title" : "init(instance: any Component)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/componentinstanceprovider\/identifier",
                    "title" : "var identifier: AnyHashable",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/componentinstanceprovider\/getcomponent()",
                    "title" : "func getComponent() -> any Component",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/componentinstanceprovider\/componentprovider-implementations",
                "title" : "ComponentProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/componentinstanceprovider",
            "title" : "ComponentInstanceProvider",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentidentifier\/id",
                "title" : "let id: ComponentIdentifier.Identifier",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentidentifier\/identifier",
                "title" : "ComponentIdentifier.Identifier",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/componentidentifier\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/componentidentifier\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/componentidentifier",
            "title" : "ComponentIdentifier",
            "type" : "struct"
          },
          {
            "path" : "\/documentation\/firebladeecs\/componentinitializable",
            "title" : "ComponentInitializable",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/firebladeecs\/componenttypehash",
            "title" : "ComponentTypeHash",
            "type" : "typealias"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componenttypeprovider\/init(type:)",
                "title" : "init(type: any ComponentInitializable.Type)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componenttypeprovider\/identifier",
                "title" : "let identifier: AnyHashable",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/componenttypeprovider\/getcomponent()",
                    "title" : "func getComponent() -> any Component",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/componenttypeprovider\/componentprovider-implementations",
                "title" : "ComponentProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/componenttypeprovider",
            "title" : "ComponentTypeProvider",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/componentsingletonprovider\/init(type:)",
                "title" : "init(type: any ComponentInitializable.Type)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/componentsingletonprovider\/identifier",
                    "title" : "var identifier: AnyHashable",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/componentsingletonprovider\/getcomponent()",
                    "title" : "func getComponent() -> any Component",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/componentsingletonprovider\/componentprovider-implementations",
                "title" : "ComponentProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/componentsingletonprovider",
            "title" : "ComponentSingletonProvider",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/singlecomponent\/init()",
                "title" : "init()",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/singlecomponent",
            "title" : "SingleComponent",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/firebladeecs\/entitycomponenthash",
            "title" : "EntityComponentHash",
            "type" : "typealias"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/statecomponentmapping\/add(_:)",
                "title" : "func add(any ComponentInitializable.Type) -> StateComponentMapping",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/statecomponentmapping\/withinstance(_:)",
                "title" : "func withInstance(any Component) -> StateComponentMapping",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/statecomponentmapping\/withmethod(_:)",
                "title" : "func withMethod(DynamicComponentProvider<some Component>.Closure) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/statecomponentmapping\/withprovider(_:)",
                "title" : "func withProvider(any ComponentProvider) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/statecomponentmapping\/withsingleton(_:)",
                "title" : "func withSingleton((any ComponentInitializable.Type)?) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/statecomponentmapping\/withtype(_:)",
                "title" : "func withType(any ComponentInitializable.Type) -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/statecomponentmapping",
            "title" : "StateComponentMapping",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Classes",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/dynamiccomponentprovider\/closure\/init(providecomponent:)",
                    "title" : "init(provideComponent: () -> C)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/dynamiccomponentprovider\/closure",
                "title" : "DynamicComponentProvider.Closure",
                "type" : "class"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/dynamiccomponentprovider\/init(closure:)",
                "title" : "init(closure: DynamicComponentProvider<C>.Closure)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/dynamiccomponentprovider\/identifier",
                    "title" : "var identifier: AnyHashable",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/dynamiccomponentprovider\/getcomponent()",
                    "title" : "func getComponent() -> any Component",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/dynamiccomponentprovider\/componentprovider-implementations",
                "title" : "ComponentProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/dynamiccomponentprovider",
            "title" : "DynamicComponentProvider",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents1\/comp1",
                "title" : "Comp1",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requiringcomponents1",
            "title" : "RequiringComponents1",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents2\/comp1",
                "title" : "Comp1",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents2\/comp2",
                "title" : "Comp2",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requiringcomponents2",
            "title" : "RequiringComponents2",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents3\/comp1",
                "title" : "Comp1",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents3\/comp2",
                "title" : "Comp2",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents3\/comp3",
                "title" : "Comp3",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requiringcomponents3",
            "title" : "RequiringComponents3",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents4\/comp1",
                "title" : "Comp1",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents4\/comp2",
                "title" : "Comp2",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents4\/comp3",
                "title" : "Comp3",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents4\/comp4",
                "title" : "Comp4",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requiringcomponents4",
            "title" : "RequiringComponents4",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents5\/comp1",
                "title" : "Comp1",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents5\/comp2",
                "title" : "Comp2",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents5\/comp3",
                "title" : "Comp3",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents5\/comp4",
                "title" : "Comp4",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents5\/comp5",
                "title" : "Comp5",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requiringcomponents5",
            "title" : "RequiringComponents5",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents6\/comp1",
                "title" : "Comp1",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents6\/comp2",
                "title" : "Comp2",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents6\/comp3",
                "title" : "Comp3",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents6\/comp4",
                "title" : "Comp4",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents6\/comp5",
                "title" : "Comp5",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents6\/comp6",
                "title" : "Comp6",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requiringcomponents6",
            "title" : "RequiringComponents6",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents7\/comp1",
                "title" : "Comp1",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents7\/comp2",
                "title" : "Comp2",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents7\/comp3",
                "title" : "Comp3",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents7\/comp4",
                "title" : "Comp4",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents7\/comp5",
                "title" : "Comp5",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents7\/comp6",
                "title" : "Comp6",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents7\/comp7",
                "title" : "Comp7",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requiringcomponents7",
            "title" : "RequiringComponents7",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents8\/comp1",
                "title" : "Comp1",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents8\/comp2",
                "title" : "Comp2",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents8\/comp3",
                "title" : "Comp3",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents8\/comp4",
                "title" : "Comp4",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents8\/comp5",
                "title" : "Comp5",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents8\/comp6",
                "title" : "Comp6",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents8\/comp7",
                "title" : "Comp7",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requiringcomponents8\/comp8",
                "title" : "Comp8",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requiringcomponents8",
            "title" : "RequiringComponents8",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/defaultinitializable\/init()",
                "title" : "init()",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/defaultinitializable",
            "title" : "DefaultInitializable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/singlecomponent\/init()",
                "title" : "init()",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/singlecomponent",
            "title" : "SingleComponent",
            "type" : "protocol"
          },
          {
            "title" : "Systems",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/init(family:)",
                    "title" : "init(family: Family<R>)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/next()",
                    "title" : "func next() -> R.Components?",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/elements",
                        "title" : "var elements: Self",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/lazy",
                        "title" : "var lazy: Self.Elements",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/compactmap(_:)-4lddz",
                        "title" : "func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/drop(while:)",
                        "title" : "func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/filter(_:)",
                        "title" : "func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/flatmap(_:)-4gwex",
                        "title" : "func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/flatmap(_:)-64kcx",
                        "title" : "func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/joined()-8mfcp",
                        "title" : "func joined() -> LazySequence<FlattenSequence<Self.Elements>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/map(_:)-5ip41",
                        "title" : "func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/lazysequenceprotocol-implementations",
                    "title" : "LazySequenceProtocol Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/compactmap(_:)-24v4u",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/droplast(_:)",
                        "title" : "func dropLast(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/flatmap(_:)-2zw1i",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/flatmap(_:)-4khee",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/formatted()",
                        "title" : "func formatted() -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/joined()-7qhh1",
                        "title" : "func joined() -> FlattenSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/joined(separator:)-2pek",
                        "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/joined(separator:)-8opg1",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/lexicographicallyprecedes(_:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/makeiterator()",
                        "title" : "func makeIterator() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/map(_:)-369r2",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/max()",
                        "title" : "func max() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/min()",
                        "title" : "func min() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/prefix(_:)",
                        "title" : "func prefix(Int) -> PrefixSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/sorted()",
                        "title" : "func sorted() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/sorted(using:)-43p97",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/sorted(using:)-qy2j",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/suffix(_:)",
                        "title" : "func suffix(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/family\/componentsiterator\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/family\/componentsiterator",
                "title" : "Family.ComponentsIterator",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/init(family:)",
                    "title" : "init(family: Family<R>)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/next()",
                    "title" : "func next() -> R.EntityAndComponents?",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/elements",
                        "title" : "var elements: Self",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/lazy",
                        "title" : "var lazy: Self.Elements",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/compactmap(_:)-2cjup",
                        "title" : "func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/drop(while:)",
                        "title" : "func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/filter(_:)",
                        "title" : "func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/flatmap(_:)-29xsl",
                        "title" : "func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/flatmap(_:)-90khv",
                        "title" : "func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/joined()-7cq6u",
                        "title" : "func joined() -> LazySequence<FlattenSequence<Self.Elements>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/map(_:)-67qh7",
                        "title" : "func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/lazysequenceprotocol-implementations",
                    "title" : "LazySequenceProtocol Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/compactmap(_:)-5bk75",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/droplast(_:)",
                        "title" : "func dropLast(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/flatmap(_:)-6rbhf",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/flatmap(_:)-8s98k",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/formatted()",
                        "title" : "func formatted() -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/joined()-cs0z",
                        "title" : "func joined() -> FlattenSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/joined(separator:)-63yj6",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/joined(separator:)-9nqv0",
                        "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/lexicographicallyprecedes(_:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/makeiterator()",
                        "title" : "func makeIterator() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/map(_:)-9c48c",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/max()",
                        "title" : "func max() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/min()",
                        "title" : "func min() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/prefix(_:)",
                        "title" : "func prefix(Int) -> PrefixSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/sorted()",
                        "title" : "func sorted() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/sorted(using:)-89ool",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/sorted(using:)-9inls",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/suffix(_:)",
                        "title" : "func suffix(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/family\/entitycomponentiterator",
                "title" : "Family.EntityComponentIterator",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/init(family:)",
                    "title" : "init(family: Family<R>)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/next()",
                    "title" : "func next() -> Entity?",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/elements",
                        "title" : "var elements: Self",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/lazy",
                        "title" : "var lazy: Self.Elements",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/compactmap(_:)-6q9b4",
                        "title" : "func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/drop(while:)",
                        "title" : "func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/filter(_:)",
                        "title" : "func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/flatmap(_:)-2gayh",
                        "title" : "func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/flatmap(_:)-45hb6",
                        "title" : "func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/map(_:)-67y8s",
                        "title" : "func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/lazysequenceprotocol-implementations",
                    "title" : "LazySequenceProtocol Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/compactmap(_:)-2tn69",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/droplast(_:)",
                        "title" : "func dropLast(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/flatmap(_:)-3n996",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/flatmap(_:)-71xto",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/makeiterator()",
                        "title" : "func makeIterator() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/map(_:)-8xei9",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/prefix(_:)",
                        "title" : "func prefix(Int) -> PrefixSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/sorted(using:)-4sak7",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/sorted(using:)-9nfkt",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/suffix(_:)",
                        "title" : "func suffix(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/family\/entityiterator\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/family\/entityiterator",
                "title" : "Family.EntityIterator",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/init(nexus:requiresall:excludesall:)",
                "title" : "init(nexus: Nexus, requiresAll: @autoclosure () -> R.ComponentTypes, excludesAll: [any Component.Type])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/entities",
                "title" : "var entities: Family<R>.EntityIterator",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/entityandcomponents",
                "title" : "var entityAndComponents: Family<R>.EntityComponentIterator",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/traits",
                "title" : "let traits: FamilyTraitSet",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/canbecomemember(_:)",
                "title" : "func canBecomeMember(Entity) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/createmember(using:)",
                "title" : "func createMember(using: () -> R.Components) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/createmember(with:)",
                "title" : "func createMember(with: R.Components) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/decodemembers(from:using:)",
                "title" : "func decodeMembers<Decoder>(from: Decoder.Input, using: inout Decoder) throws -> [Entity]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/destroymembers()",
                "title" : "func destroyMembers() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/encodemembers(using:)",
                "title" : "func encodeMembers<Encoder>(using: inout Encoder) throws -> Encoder.Output",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/family\/ismember(_:)",
                "title" : "func isMember(Entity) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/==(_:_:)",
                    "title" : "static func == (Family<R>, Family<R>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/family\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/elements",
                    "title" : "var elements: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/lazy",
                    "title" : "var lazy: Self.Elements",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/compactmap(_:)-585ss",
                    "title" : "func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/drop(while:)",
                    "title" : "func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/filter(_:)",
                    "title" : "func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/flatmap(_:)-4b7cp",
                    "title" : "func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/flatmap(_:)-5429y",
                    "title" : "func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/joined()-2xraq",
                    "title" : "func joined() -> LazySequence<FlattenSequence<Self.Elements>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/map(_:)-3ntsq",
                    "title" : "func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/family\/lazysequenceprotocol-implementations",
                "title" : "LazySequenceProtocol Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/compactmap(_:)-3eka8",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/count(where:)",
                    "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/flatmap(_:)-5l5fz",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/flatmap(_:)-bycx",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/formatted()",
                    "title" : "func formatted() -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/joined()-2rir3",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/joined(separator:)-2sykd",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/joined(separator:)-9shrb",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/makeiterator()",
                    "title" : "func makeIterator() -> Family<R>.ComponentsIterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/map(_:)-2s2xr",
                    "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/sorted(using:)-1be2k",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/sorted(using:)-8lgr4",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/family\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/family\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/family",
            "title" : "Family",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familyencoding\/encode(components:into:using:)",
                "title" : "static func encode(components: Self.Components, into: inout KeyedEncodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/firebladeecs\/familyencoding\/encode(componentsarray:into:using:)-4bqfm",
                        "title" : "static func encode(componentsArray: [Self.Components], into: inout any UnkeyedEncodingContainer, using: any CodingStrategy) throws",
                        "type" : "method"
                      }
                    ],
                    "title" : "FamilyEncoding Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/familyencoding\/encode(componentsarray:into:using:)-9rbzq",
                "title" : "static func encode(componentsArray: [Self.Components], into: inout any UnkeyedEncodingContainer, using: any CodingStrategy) throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/familyencoding",
            "title" : "FamilyEncoding",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/firebladeecs\/familydecoding\/decode(componentsin:using:)-14164",
                        "title" : "static func decode(componentsIn: inout any UnkeyedDecodingContainer, using: any CodingStrategy) throws -> [Self.Components]",
                        "type" : "method"
                      }
                    ],
                    "title" : "FamilyDecoding Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/familydecoding\/decode(componentsin:using:)-11l02",
                "title" : "static func decode(componentsIn: KeyedDecodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws -> Self.Components",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/firebladeecs\/familydecoding\/decode(componentsin:using:)-14164",
                        "title" : "static func decode(componentsIn: inout any UnkeyedDecodingContainer, using: any CodingStrategy) throws -> [Self.Components]",
                        "type" : "method"
                      }
                    ],
                    "title" : "FamilyDecoding Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/familydecoding\/decode(componentsin:using:)-736jc",
                "title" : "static func decode(componentsIn: inout any UnkeyedDecodingContainer, using: any CodingStrategy) throws -> [Self.Components]",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/familydecoding",
            "title" : "FamilyDecoding",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberadded\/member",
                "title" : "let member: EntityIdentifier",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberadded\/tofamily",
                "title" : "let toFamily: FamilyTraitSet",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/familymemberadded",
            "title" : "FamilyMemberAdded",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberremoved\/from",
                "title" : "let from: FamilyTraitSet",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberremoved\/member",
                "title" : "let member: EntityIdentifier",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/familymemberremoved",
            "title" : "FamilyMemberRemoved",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:)",
                "title" : "static func buildBlock(R.Comp1) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3, R.Comp4) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3, R.Comp4, R.Comp5) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3, R.Comp4, R.Comp5, R.Comp6) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:_:_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3, R.Comp4, R.Comp5, R.Comp6, R.Comp7) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:_:_:_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3, R.Comp4, R.Comp5, R.Comp6, R.Comp7, R.Comp8) -> (R.Components)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/familymemberbuilder",
            "title" : "FamilyMemberBuilder",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:)",
                "title" : "static func buildBlock(R.Comp1) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3, R.Comp4) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3, R.Comp4, R.Comp5) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3, R.Comp4, R.Comp5, R.Comp6) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:_:_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3, R.Comp4, R.Comp5, R.Comp6, R.Comp7) -> (R.Components)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familymemberbuilder\/buildblock(_:_:_:_:_:_:_:_:)",
                "title" : "static func buildBlock(R.Comp1, R.Comp2, R.Comp3, R.Comp4, R.Comp5, R.Comp6, R.Comp7, R.Comp8) -> (R.Components)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/familymemberbuilder",
            "title" : "FamilyMemberBuilder",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familytraitset\/init(requiresall:excludesall:)",
                "title" : "init(requiresAll: [any Component.Type], excludesAll: [any Component.Type])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familytraitset\/excludesall",
                "title" : "let excludesAll: Set<ComponentIdentifier>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familytraitset\/requiresall",
                "title" : "let requiresAll: Set<ComponentIdentifier>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familytraitset\/sethash",
                "title" : "let setHash: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familytraitset\/hasall(_:)",
                "title" : "func hasAll(Set<ComponentIdentifier>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familytraitset\/hasnone(_:)",
                "title" : "func hasNone(Set<ComponentIdentifier>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familytraitset\/ismatch(components:)",
                "title" : "func isMatch(components: Set<ComponentIdentifier>) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familytraitset\/isvalid(requiresall:excludesall:)",
                "title" : "static func isValid(requiresAll: Set<ComponentIdentifier>, excludesAll: Set<ComponentIdentifier>) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/familytraitset\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/familytraitset\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/familytraitset\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/familytraitset\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/familytraitset\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/familytraitset\/==(_:_:)",
                    "title" : "static func == (FamilyTraitSet, FamilyTraitSet) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/familytraitset\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/familytraitset\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/familytraitset\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/familytraitset",
            "title" : "FamilyTraitSet",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires1\/init(_:)",
                "title" : "init((Comp1.Type))",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires1\/componenttypes",
                "title" : "let componentTypes: [any Component.Type]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires1\/components(nexus:entityid:)",
                "title" : "static func components(nexus: Nexus, entityId: EntityIdentifier) -> (Comp1)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires1\/createmember(nexus:components:)",
                "title" : "static func createMember(nexus: Nexus, components: (Comp1)) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires1\/entityandcomponents(nexus:entityid:)",
                "title" : "static func entityAndComponents(nexus: Nexus, entityId: EntityIdentifier) -> (Entity, Comp1)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires1\/decode(componentsin:using:)-6nhll",
                    "title" : "static func decode(componentsIn: KeyedDecodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws -> (Comp1)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires1\/decode(componentsin:using:)-9lelz",
                    "title" : "static func decode(componentsIn: inout any UnkeyedDecodingContainer, using: any CodingStrategy) throws -> [Self.Components]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires1\/familydecoding-implementations",
                "title" : "FamilyDecoding Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires1\/encode(components:into:using:)",
                    "title" : "static func encode(components: (Comp1), into: inout KeyedEncodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires1\/encode(componentsarray:into:using:)",
                    "title" : "static func encode(componentsArray: [Self.Components], into: inout any UnkeyedEncodingContainer, using: any CodingStrategy) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires1\/familyencoding-implementations",
                "title" : "FamilyEncoding Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requires1",
            "title" : "Requires1",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires2\/init(_:)",
                "title" : "init((Comp1.Type, Comp2.Type))",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires2\/componenttypes",
                "title" : "let componentTypes: [any Component.Type]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires2\/components(nexus:entityid:)",
                "title" : "static func components(nexus: Nexus, entityId: EntityIdentifier) -> (Comp1, Comp2)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires2\/createmember(nexus:components:)",
                "title" : "static func createMember(nexus: Nexus, components: (Comp1, Comp2)) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires2\/entityandcomponents(nexus:entityid:)",
                "title" : "static func entityAndComponents(nexus: Nexus, entityId: EntityIdentifier) -> (Entity, Comp1, Comp2)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires2\/decode(componentsin:using:)-9lehn",
                    "title" : "static func decode(componentsIn: inout any UnkeyedDecodingContainer, using: any CodingStrategy) throws -> [Self.Components]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires2\/decode(componentsin:using:)-p4dv",
                    "title" : "static func decode(componentsIn: KeyedDecodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws -> (Comp1, Comp2)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires2\/familydecoding-implementations",
                "title" : "FamilyDecoding Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires2\/encode(components:into:using:)",
                    "title" : "static func encode(components: (Comp1, Comp2), into: inout KeyedEncodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires2\/encode(componentsarray:into:using:)",
                    "title" : "static func encode(componentsArray: [Self.Components], into: inout any UnkeyedEncodingContainer, using: any CodingStrategy) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires2\/familyencoding-implementations",
                "title" : "FamilyEncoding Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requires2",
            "title" : "Requires2",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires3\/init(_:)",
                "title" : "init((Comp1.Type, Comp2.Type, Comp3.Type))",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires3\/componenttypes",
                "title" : "let componentTypes: [any Component.Type]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires3\/components(nexus:entityid:)",
                "title" : "static func components(nexus: Nexus, entityId: EntityIdentifier) -> (Comp1, Comp2, Comp3)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires3\/createmember(nexus:components:)",
                "title" : "static func createMember(nexus: Nexus, components: (Comp1, Comp2, Comp3)) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires3\/entityandcomponents(nexus:entityid:)",
                "title" : "static func entityAndComponents(nexus: Nexus, entityId: EntityIdentifier) -> (Entity, Comp1, Comp2, Comp3)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires3\/decode(componentsin:using:)-3e2qn",
                    "title" : "static func decode(componentsIn: KeyedDecodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws -> (Comp1, Comp2, Comp3)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires3\/decode(componentsin:using:)-9ldzf",
                    "title" : "static func decode(componentsIn: inout any UnkeyedDecodingContainer, using: any CodingStrategy) throws -> [Self.Components]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires3\/familydecoding-implementations",
                "title" : "FamilyDecoding Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires3\/encode(components:into:using:)",
                    "title" : "static func encode(components: (Comp1, Comp2, Comp3), into: inout KeyedEncodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires3\/encode(componentsarray:into:using:)",
                    "title" : "static func encode(componentsArray: [Self.Components], into: inout any UnkeyedEncodingContainer, using: any CodingStrategy) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires3\/familyencoding-implementations",
                "title" : "FamilyEncoding Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requires3",
            "title" : "Requires3",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires4\/init(_:)",
                "title" : "init((Comp1.Type, Comp2.Type, Comp3.Type, Comp4.Type))",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires4\/componenttypes",
                "title" : "let componentTypes: [any Component.Type]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires4\/components(nexus:entityid:)",
                "title" : "static func components(nexus: Nexus, entityId: EntityIdentifier) -> (Comp1, Comp2, Comp3, Comp4)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires4\/createmember(nexus:components:)",
                "title" : "static func createMember(nexus: Nexus, components: (Comp1, Comp2, Comp3, Comp4)) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires4\/entityandcomponents(nexus:entityid:)",
                "title" : "static func entityAndComponents(nexus: Nexus, entityId: EntityIdentifier) -> (Entity, Comp1, Comp2, Comp3, Comp4)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires4\/decode(componentsin:using:)-6sxq5",
                    "title" : "static func decode(componentsIn: KeyedDecodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws -> (Comp1, Comp2, Comp3, Comp4)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires4\/decode(componentsin:using:)-9ldof",
                    "title" : "static func decode(componentsIn: inout any UnkeyedDecodingContainer, using: any CodingStrategy) throws -> [Self.Components]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires4\/familydecoding-implementations",
                "title" : "FamilyDecoding Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires4\/encode(components:into:using:)",
                    "title" : "static func encode(components: (Comp1, Comp2, Comp3, Comp4), into: inout KeyedEncodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires4\/encode(componentsarray:into:using:)",
                    "title" : "static func encode(componentsArray: [Self.Components], into: inout any UnkeyedEncodingContainer, using: any CodingStrategy) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires4\/familyencoding-implementations",
                "title" : "FamilyEncoding Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requires4",
            "title" : "Requires4",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires5\/init(_:)",
                "title" : "init((Comp1.Type, Comp2.Type, Comp3.Type, Comp4.Type, Comp5.Type))",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires5\/componenttypes",
                "title" : "let componentTypes: [any Component.Type]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires5\/components(nexus:entityid:)",
                "title" : "static func components(nexus: Nexus, entityId: EntityIdentifier) -> (Comp1, Comp2, Comp3, Comp4, Comp5)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires5\/createmember(nexus:components:)",
                "title" : "static func createMember(nexus: Nexus, components: (Comp1, Comp2, Comp3, Comp4, Comp5)) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires5\/entityandcomponents(nexus:entityid:)",
                "title" : "static func entityAndComponents(nexus: Nexus, entityId: EntityIdentifier) -> (Entity, Comp1, Comp2, Comp3, Comp4, Comp5)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires5\/decode(componentsin:using:)-4g3ra",
                    "title" : "static func decode(componentsIn: KeyedDecodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws -> (Comp1, Comp2, Comp3, Comp4, Comp5)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires5\/decode(componentsin:using:)-9ldkv",
                    "title" : "static func decode(componentsIn: inout any UnkeyedDecodingContainer, using: any CodingStrategy) throws -> [Self.Components]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires5\/familydecoding-implementations",
                "title" : "FamilyDecoding Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires5\/encode(components:into:using:)",
                    "title" : "static func encode(components: (Comp1, Comp2, Comp3, Comp4, Comp5), into: inout KeyedEncodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires5\/encode(componentsarray:into:using:)",
                    "title" : "static func encode(componentsArray: [Self.Components], into: inout any UnkeyedEncodingContainer, using: any CodingStrategy) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires5\/familyencoding-implementations",
                "title" : "FamilyEncoding Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requires5",
            "title" : "Requires5",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires6\/init(_:)",
                "title" : "init((Comp1.Type, Comp2.Type, Comp3.Type, Comp4.Type, Comp5.Type, Comp6.Type))",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires6\/componenttypes",
                "title" : "let componentTypes: [any Component.Type]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires6\/components(nexus:entityid:)",
                "title" : "static func components(nexus: Nexus, entityId: EntityIdentifier) -> (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires6\/createmember(nexus:components:)",
                "title" : "static func createMember(nexus: Nexus, components: (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6)) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires6\/entityandcomponents(nexus:entityid:)",
                "title" : "static func entityAndComponents(nexus: Nexus, entityId: EntityIdentifier) -> (Entity, Comp1, Comp2, Comp3, Comp4, Comp5, Comp6)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires6\/decode(componentsin:using:)-6skdi",
                    "title" : "static func decode(componentsIn: KeyedDecodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws -> (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires6\/decode(componentsin:using:)-9ld1n",
                    "title" : "static func decode(componentsIn: inout any UnkeyedDecodingContainer, using: any CodingStrategy) throws -> [Self.Components]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires6\/familydecoding-implementations",
                "title" : "FamilyDecoding Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires6\/encode(components:into:using:)",
                    "title" : "static func encode(components: (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6), into: inout KeyedEncodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires6\/encode(componentsarray:into:using:)",
                    "title" : "static func encode(componentsArray: [Self.Components], into: inout any UnkeyedEncodingContainer, using: any CodingStrategy) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires6\/familyencoding-implementations",
                "title" : "FamilyEncoding Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requires6",
            "title" : "Requires6",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires7\/init(_:)",
                "title" : "init((Comp1.Type, Comp2.Type, Comp3.Type, Comp4.Type, Comp5.Type, Comp6.Type, Comp7.Type))",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires7\/componenttypes",
                "title" : "let componentTypes: [any Component.Type]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires7\/components(nexus:entityid:)",
                "title" : "static func components(nexus: Nexus, entityId: EntityIdentifier) -> (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires7\/createmember(nexus:components:)",
                "title" : "static func createMember(nexus: Nexus, components: (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7)) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires7\/entityandcomponents(nexus:entityid:)",
                "title" : "static func entityAndComponents(nexus: Nexus, entityId: EntityIdentifier) -> (Entity, Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires7\/decode(componentsin:using:)-99vut",
                    "title" : "static func decode(componentsIn: KeyedDecodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws -> (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires7\/decode(componentsin:using:)-9lcyj",
                    "title" : "static func decode(componentsIn: inout any UnkeyedDecodingContainer, using: any CodingStrategy) throws -> [Self.Components]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires7\/familydecoding-implementations",
                "title" : "FamilyDecoding Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires7\/encode(components:into:using:)",
                    "title" : "static func encode(components: (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7), into: inout KeyedEncodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires7\/encode(componentsarray:into:using:)",
                    "title" : "static func encode(componentsArray: [Self.Components], into: inout any UnkeyedEncodingContainer, using: any CodingStrategy) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires7\/familyencoding-implementations",
                "title" : "FamilyEncoding Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requires7",
            "title" : "Requires7",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires8\/init(_:)",
                "title" : "init((Comp1.Type, Comp2.Type, Comp3.Type, Comp4.Type, Comp5.Type, Comp6.Type, Comp7.Type, Comp8.Type))",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires8\/componenttypes",
                "title" : "let componentTypes: [any Component.Type]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires8\/components(nexus:entityid:)",
                "title" : "static func components(nexus: Nexus, entityId: EntityIdentifier) -> (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7, Comp8)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires8\/createmember(nexus:components:)",
                "title" : "static func createMember(nexus: Nexus, components: (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7, Comp8)) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/requires8\/entityandcomponents(nexus:entityid:)",
                "title" : "static func entityAndComponents(nexus: Nexus, entityId: EntityIdentifier) -> (Entity, Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7, Comp8)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires8\/decode(componentsin:using:)-2cwoq",
                    "title" : "static func decode(componentsIn: KeyedDecodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws -> (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7, Comp8)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires8\/decode(componentsin:using:)-9lhef",
                    "title" : "static func decode(componentsIn: inout any UnkeyedDecodingContainer, using: any CodingStrategy) throws -> [Self.Components]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires8\/familydecoding-implementations",
                "title" : "FamilyDecoding Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires8\/encode(components:into:using:)",
                    "title" : "static func encode(components: (Comp1, Comp2, Comp3, Comp4, Comp5, Comp6, Comp7, Comp8), into: inout KeyedEncodingContainer<DynamicCodingKey>, using: any CodingStrategy) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/requires8\/encode(componentsarray:into:using:)",
                    "title" : "static func encode(componentsArray: [Self.Components], into: inout any UnkeyedEncodingContainer, using: any CodingStrategy) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/requires8\/familyencoding-implementations",
                "title" : "FamilyEncoding Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/requires8",
            "title" : "Requires8",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/single\/component",
                "title" : "var component: A",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/single\/entity",
                "title" : "var entity: Entity",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/single\/entityid",
                "title" : "let entityId: EntityIdentifier",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/single\/nexus",
                "title" : "let nexus: Nexus",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/single\/traits",
                "title" : "let traits: FamilyTraitSet",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/single\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/single\/==(_:_:)",
                    "title" : "static func == (Single<A>, Single<A>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/single\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/single",
            "title" : "Single",
            "type" : "struct"
          },
          {
            "path" : "\/documentation\/firebladeecs\/family1",
            "title" : "Family1",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/firebladeecs\/family2",
            "title" : "Family2",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/firebladeecs\/family3",
            "title" : "Family3",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/firebladeecs\/family4",
            "title" : "Family4",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/firebladeecs\/family5",
            "title" : "Family5",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/firebladeecs\/family6",
            "title" : "Family6",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/firebladeecs\/family7",
            "title" : "Family7",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/firebladeecs\/family8",
            "title" : "Family8",
            "type" : "typealias"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familyrequirementsmanaging\/componenttypes-swift.associatedtype",
                "title" : "ComponentTypes",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familyrequirementsmanaging\/components",
                "title" : "Components",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familyrequirementsmanaging\/entityandcomponents",
                "title" : "EntityAndComponents",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familyrequirementsmanaging\/init(_:)",
                "title" : "init(Self.ComponentTypes)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familyrequirementsmanaging\/componenttypes-swift.property",
                "title" : "var componentTypes: [any Component.Type]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familyrequirementsmanaging\/components(nexus:entityid:)",
                "title" : "static func components(nexus: Nexus, entityId: EntityIdentifier) -> Self.Components",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familyrequirementsmanaging\/createmember(nexus:components:)",
                "title" : "static func createMember(nexus: Nexus, components: Self.Components) -> Entity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/familyrequirementsmanaging\/entityandcomponents(nexus:entityid:)",
                "title" : "static func entityAndComponents(nexus: Nexus, entityId: EntityIdentifier) -> Self.EntityAndComponents",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/familyrequirementsmanaging",
            "title" : "FamilyRequirementsManaging",
            "type" : "protocol"
          },
          {
            "title" : "Coding Strategies",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/codingstrategy\/codingkey(for:)",
                "title" : "func codingKey<C>(for: C.Type) -> DynamicCodingKey",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/codingstrategy",
            "title" : "CodingStrategy",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/defaultcodingstrategy\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/defaultcodingstrategy\/codingkey(for:)",
                "title" : "func codingKey<C>(for: C.Type) -> DynamicCodingKey",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/defaultcodingstrategy",
            "title" : "DefaultCodingStrategy",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/topleveldecoder\/input",
                "title" : "Input",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/topleveldecoder\/userinfo",
                "title" : "var userInfo: [CodingUserInfoKey : Any]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/topleveldecoder\/decode(_:from:)",
                "title" : "func decode<T>(T.Type, from: Self.Input) throws -> T",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/topleveldecoder",
            "title" : "TopLevelDecoder",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/toplevelencoder\/output",
                "title" : "Output",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/toplevelencoder\/userinfo",
                "title" : "var userInfo: [CodingUserInfoKey : Any]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/toplevelencoder\/encode(_:)",
                "title" : "func encode<T>(T) throws -> Self.Output",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/toplevelencoder",
            "title" : "TopLevelEncoder",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/dynamiccodingkey\/init(intvalue:)",
                "title" : "init?(intValue: Int)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/firebladeecs\/dynamiccodingkey\/init(stringvalue:)",
                "title" : "init?(stringValue: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/dynamiccodingkey\/intvalue",
                "title" : "var intValue: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/dynamiccodingkey\/stringvalue",
                "title" : "var stringValue: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/dynamiccodingkey\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/dynamiccodingkey\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/dynamiccodingkey\/codingkey-implementations",
                "title" : "CodingKey Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/dynamiccodingkey",
            "title" : "DynamicCodingKey",
            "type" : "struct"
          },
          {
            "title" : "Supporting Types",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/init(mincount:)",
                "title" : "init(minCount: Int)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/clear(keepingcapacity:)",
                "title" : "func clear(keepingCapacity: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/contains(_:)",
                "title" : "func contains(ManagedContiguousArray<Element>.Index) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/get(at:)",
                "title" : "func get(at: ManagedContiguousArray<Element>.Index) -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/get(unsafeat:)",
                "title" : "func get(unsafeAt: ManagedContiguousArray<Element>.Index) -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/insert(_:at:)",
                "title" : "func insert(Element, at: Int) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/remove(at:)",
                "title" : "func remove(at: ManagedContiguousArray<Element>.Index) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/index",
                "title" : "ManagedContiguousArray.Index",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/==(_:_:)",
                    "title" : "static func == (ManagedContiguousArray<Element>, ManagedContiguousArray<Element>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/managedcontiguousarray\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/managedcontiguousarray",
            "title" : "ManagedContiguousArray",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/init(_:)",
                    "title" : "init(UnorderedSparseSet<UnorderedSparseSet<Element, Key>.ElementIterator.Element, Key>)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/next()",
                    "title" : "func next() -> Element?",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/elements",
                        "title" : "var elements: Self",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/lazy",
                        "title" : "var lazy: Self.Elements",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/compactmap(_:)-8natb",
                        "title" : "func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/drop(while:)",
                        "title" : "func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/filter(_:)",
                        "title" : "func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/flatmap(_:)-3np02",
                        "title" : "func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/flatmap(_:)-63csa",
                        "title" : "func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/joined()-88mzm",
                        "title" : "func joined() -> LazySequence<FlattenSequence<Self.Elements>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/map(_:)-52o9j",
                        "title" : "func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/lazysequenceprotocol-implementations",
                    "title" : "LazySequenceProtocol Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/compactmap(_:)-5y8x0",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/droplast(_:)",
                        "title" : "func dropLast(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/flatmap(_:)-1ey5c",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/flatmap(_:)-6zl91",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/formatted()",
                        "title" : "func formatted() -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/joined()-8utgu",
                        "title" : "func joined() -> FlattenSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/joined(separator:)-4vpho",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/joined(separator:)-5usmy",
                        "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/lexicographicallyprecedes(_:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/makeiterator()",
                        "title" : "func makeIterator() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/map(_:)-7x090",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/max()",
                        "title" : "func max() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/min()",
                        "title" : "func min() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/prefix(_:)",
                        "title" : "func prefix(Int) -> PrefixSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/sorted()",
                        "title" : "func sorted() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/sorted(using:)-5uzbf",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/sorted(using:)-6pfao",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/suffix(_:)",
                        "title" : "func suffix(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementiterator",
                "title" : "UnorderedSparseSet.ElementIterator",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/first",
                "title" : "var first: Element?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/contains(_:)",
                "title" : "func contains(Key) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/get(at:)",
                "title" : "func get(at: Key) -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/get(unsafeat:)",
                "title" : "func get(unsafeAt: Key) -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/insert(_:at:)",
                "title" : "func insert(Element, at: Key) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/remove(at:)",
                "title" : "func remove(at: Key) -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/removeall(keepingcapacity:)",
                "title" : "func removeAll(keepingCapacity: Bool)",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/subscript(_:)",
                "title" : "subscript(Key) -> Element",
                "type" : "subscript"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/==(_:_:)",
                    "title" : "static func == (UnorderedSparseSet<Element, Key>, UnorderedSparseSet<Element, Key>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/count(where:)",
                    "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/filter(_:)-4a5h4",
                    "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/filter(_:)-4p6a4",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/flatmap(_:)-1paek",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/flatmap(_:)-39whs",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/formatted()",
                    "title" : "func formatted() -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/joined(separator:)-33j0n",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/joined(separator:)-99o5z",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/makeiterator()",
                    "title" : "func makeIterator() -> UnorderedSparseSet<Element, Key>.ElementIterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/map(_:)",
                    "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/sorted(using:)-2weus",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/sorted(using:)-62mhv",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/firebladeecs\/unorderedsparseset\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/unorderedsparseset",
            "title" : "UnorderedSparseSet",
            "type" : "struct"
          },
          {
            "title" : "Hash Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/firebladeecs\/hash(combine:)",
            "title" : "func hash<H>(combine: H) -> Int",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/firebladeecs\/hash(combine:_:)",
            "title" : "func hash(combine: Int, Int) -> Int",
            "type" : "func"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/firebladeecs\/stringhashing\/bernstein_djb2(_:)",
                "title" : "static func bernstein_djb2(String) -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/stringhashing\/sdbm(_:)",
                "title" : "static func sdbm(String) -> UInt64",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/firebladeecs\/stringhashing\/singer_djb2(_:)",
                "title" : "static func singer_djb2(String) -> UInt64",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/firebladeecs\/stringhashing",
            "title" : "StringHashing",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/firebladeecs",
        "title" : "FirebladeECS",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 2
  }
}